<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>设计一个vue table组件</title>
      <link href="/2019/08/07/%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AAvue-table%E7%BB%84%E4%BB%B6/"/>
      <url>/2019/08/07/%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AAvue-table%E7%BB%84%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>table分为两个组件 table.vue、table-column.vue,使用如下<br>要求 良好的扩展性</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>fat<span class="token operator">-</span>table <span class="token punctuation">:</span>data<span class="token operator">=</span><span class="token string">"tableDemoData"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>template slot<span class="token operator">-</span>scope<span class="token operator">=</span><span class="token string">"{ item }"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>fat<span class="token operator">-</span>table<span class="token operator">-</span>column label<span class="token operator">=</span><span class="token string">"姓名"</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> item<span class="token punctuation">.</span>name <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>fat<span class="token operator">-</span>table<span class="token operator">-</span>column<span class="token operator">></span>    <span class="token operator">&lt;</span>fat<span class="token operator">-</span>table<span class="token operator">-</span>column label<span class="token operator">=</span><span class="token string">"出生"</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> item<span class="token punctuation">.</span>date <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>fat<span class="token operator">-</span>table<span class="token operator">-</span>column<span class="token operator">></span>    <span class="token operator">&lt;</span>fat<span class="token operator">-</span>table<span class="token operator">-</span>column label<span class="token operator">=</span><span class="token string">"地址"</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> item<span class="token punctuation">.</span>address <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>fat<span class="token operator">-</span>table<span class="token operator">-</span>column<span class="token operator">></span>    <span class="token operator">&lt;</span>fat<span class="token operator">-</span>table<span class="token operator">-</span>column label<span class="token operator">=</span><span class="token string">"操作"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>button<span class="token operator">></span>操作<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>      <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"print(item)"</span><span class="token operator">></span>删除<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>fat<span class="token operator">-</span>table<span class="token operator">-</span>column<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>fat<span class="token operator">-</span>table<span class="token operator">></span></code></pre><p>table组件</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>table <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"table"</span> <span class="token punctuation">:</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"['table-wrapper', { 'is-stripe': stripe }]"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>thead<span class="token operator">></span>      <span class="token operator">&lt;</span>tr <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"tr-wrapper"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>th          v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"(item, index) in labels"</span>          <span class="token punctuation">:</span>key<span class="token operator">=</span><span class="token string">"index"</span>          <span class="token punctuation">:</span>colspan<span class="token operator">=</span><span class="token string">"item.colspan"</span>          <span class="token punctuation">:</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"`th-wrapper c-size-l c-bold text-${align}`"</span>        <span class="token operator">></span>          <span class="token punctuation">{</span><span class="token punctuation">{</span> item<span class="token punctuation">.</span>label <span class="token punctuation">}</span><span class="token punctuation">}</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>thead<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> Table<span class="token operator">-</span>body <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>tbody <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"table-body-wrapper"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>tr v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"(item, index) in data"</span> <span class="token punctuation">:</span>key<span class="token operator">=</span><span class="token string">"index"</span> <span class="token punctuation">:</span>data<span class="token operator">-</span>index<span class="token operator">=</span><span class="token string">"index"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"tr-wrapper"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>slot <span class="token punctuation">:</span>item<span class="token operator">=</span><span class="token string">"item"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>tbody<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>table<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  props<span class="token punctuation">:</span> <span class="token punctuation">{</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span> type<span class="token punctuation">:</span> Array<span class="token punctuation">,</span> <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    align<span class="token punctuation">:</span> <span class="token punctuation">{</span> type<span class="token punctuation">:</span> String<span class="token punctuation">,</span> <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token string">'left'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    stripe<span class="token punctuation">:</span> <span class="token punctuation">{</span> type<span class="token punctuation">:</span> Boolean<span class="token punctuation">,</span> <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">provide</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      fatTable<span class="token punctuation">:</span> <span class="token keyword">this</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      labels<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">addLabel</span><span class="token punctuation">(</span>label<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> <span class="token punctuation">{</span> labels <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span>      <span class="token keyword">const</span> existItem <span class="token operator">=</span> labels<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> item<span class="token punctuation">.</span>label <span class="token operator">===</span> label<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// 利用 colspan 来处理合并表头的情况</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>existItem<span class="token punctuation">)</span> <span class="token punctuation">{</span>        existItem<span class="token punctuation">.</span>colspan <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        labels<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>          label<span class="token punctuation">,</span>          colspan<span class="token punctuation">:</span> <span class="token number">1</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">delLabel</span><span class="token punctuation">(</span>label<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>labels <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>labels<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> item<span class="token punctuation">.</span>label <span class="token operator">!==</span> label<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>style lang<span class="token operator">=</span><span class="token string">"scss"</span> scoped<span class="token operator">></span>$main<span class="token operator">-</span>color<span class="token punctuation">:</span> blue<span class="token punctuation">;</span><span class="token punctuation">.</span>table <span class="token punctuation">{</span>  <span class="token operator">&amp;</span><span class="token punctuation">.</span>is<span class="token operator">-</span>stripe <span class="token punctuation">{</span>    <span class="token punctuation">.</span>table__body<span class="token operator">-</span>wrapper <span class="token punctuation">{</span>      <span class="token punctuation">.</span>tr<span class="token operator">-</span>wrapper<span class="token punctuation">:</span>nth<span class="token operator">-</span><span class="token function">child</span><span class="token punctuation">(</span>2n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        background<span class="token punctuation">:</span> blue<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token punctuation">.</span>tr<span class="token operator">-</span>wrapper<span class="token punctuation">:</span>hover <span class="token punctuation">{</span>        background<span class="token punctuation">:</span> red<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token punctuation">.</span>tr<span class="token operator">-</span>wrapper <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// border: 1px solid #5c0;</span>  <span class="token punctuation">}</span>  td<span class="token punctuation">,</span> th<span class="token punctuation">{</span>    border<span class="token punctuation">:</span> 1px solid #5c0<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token punctuation">.</span>th<span class="token operator">-</span>wrapper <span class="token punctuation">{</span>    padding<span class="token punctuation">:</span> 4px 6px<span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token punctuation">.</span>text<span class="token operator">-</span>left <span class="token punctuation">{</span>      text<span class="token operator">-</span>align<span class="token punctuation">:</span> left<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">&amp;</span><span class="token punctuation">.</span>text<span class="token operator">-</span>center <span class="token punctuation">{</span>      text<span class="token operator">-</span>align<span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">&amp;</span><span class="token punctuation">.</span>text<span class="token operator">-</span>right <span class="token punctuation">{</span>      text<span class="token operator">-</span>align<span class="token punctuation">:</span> right<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token punctuation">.</span>table__body<span class="token operator">-</span>wrapper <span class="token punctuation">{</span>    <span class="token punctuation">.</span>tr<span class="token operator">-</span>wrapper<span class="token punctuation">:</span>hover <span class="token punctuation">{</span>      background<span class="token punctuation">:</span> red<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span></code></pre><p>table-cloumn组件</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>td <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"td-wrapper c-size-m"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>slot<span class="token operator">></span>无<span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  props<span class="token punctuation">:</span> <span class="token punctuation">{</span>    label<span class="token punctuation">:</span> <span class="token punctuation">{</span> type<span class="token punctuation">:</span> String<span class="token punctuation">,</span> required<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  inject<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'fatTable'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> dom <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">.</span>parentNode      <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token keyword">null</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>dom<span class="token punctuation">.</span>tagName <span class="token operator">!==</span> <span class="token string">'TR'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        dom <span class="token operator">=</span> dom<span class="token punctuation">.</span>parentNode      <span class="token punctuation">}</span>      index <span class="token operator">=</span> dom<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">'data-index'</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// 渲染第一行时将label添加进表头数组</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">===</span> <span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>fatTable<span class="token punctuation">.</span><span class="token function">addLabel</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>label<span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$destroy <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>fatTable<span class="token punctuation">.</span><span class="token function">delLabel</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>label<span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>style lang<span class="token operator">=</span><span class="token string">"scss"</span><span class="token operator">></span><span class="token punctuation">.</span>td<span class="token operator">-</span>wrapper <span class="token punctuation">{</span>  padding<span class="token punctuation">:</span> 4px 6px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>js书写风格</title>
      <link href="/2019/07/25/js%E4%B9%A6%E5%86%99%E9%A3%8E%E6%A0%BC/"/>
      <url>/2019/07/25/js%E4%B9%A6%E5%86%99%E9%A3%8E%E6%A0%BC/</url>
      
        <content type="html"><![CDATA[<h3 id="采用默认参数精简代码"><a href="#采用默认参数精简代码" class="headerlink" title="采用默认参数精简代码"></a>采用默认参数精简代码</h3><h4 id="反例"><a href="#反例" class="headerlink" title="反例:"></a>反例:</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">writeForumComment</span><span class="token punctuation">(</span>subject<span class="token punctuation">,</span> body<span class="token punctuation">)</span> <span class="token punctuation">{</span>  subject <span class="token operator">=</span> subject <span class="token operator">||</span> <span class="token string">'No Subject'</span><span class="token punctuation">;</span>  body <span class="token operator">=</span> body <span class="token operator">||</span> <span class="token string">'No text'</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="正例"><a href="#正例" class="headerlink" title="正例:"></a>正例:</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">writeForumComment</span><span class="token punctuation">(</span>subject <span class="token operator">=</span> <span class="token string">'No subject'</span><span class="token punctuation">,</span> body <span class="token operator">=</span> <span class="token string">'No text'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token operator">...</span><span class="token punctuation">}</span></code></pre><h3 id="不要写全局函数"><a href="#不要写全局函数" class="headerlink" title="不要写全局函数"></a>不要写全局函数</h3><p>在 JS 中污染全局是一个非常不好的实践，这么做可能和其他库起冲突，且调用你的 API 的用户在实际环境中得到一个 exception 前对这一情况是一无所知的。</p><p>想象以下例子：如果你想扩展 JS 中的 Array，为其添加一个 diff 函数显示两个数组间的差异，此时应如何去做？你可以将 diff 写入 Array.prototype，但这么做会和其他有类似需求的库造成冲突。如果另一个库对 diff 的需求为比较一个数组中首尾元素间的差异呢？</p><p>使用 ES6 中的 class 对全局的 Array 做简单的扩展显然是一个更棒的选择。</p><h4 id="反例-1"><a href="#反例-1" class="headerlink" title="反例:"></a>反例:</h4><pre class=" language-js"><code class="language-js">Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>diff <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>comparisonArray<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> values <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> hash <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">of</span> comparisonArray<span class="token punctuation">)</span> <span class="token punctuation">{</span>    hash<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">of</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>hash<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      values<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> values<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="正例-1"><a href="#正例-1" class="headerlink" title="正例:"></a>正例:</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">SuperArray</span> <span class="token keyword">extends</span> <span class="token class-name">Array</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">diff</span><span class="token punctuation">(</span>comparisonArray<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> values <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> hash <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">of</span> comparisonArray<span class="token punctuation">)</span> <span class="token punctuation">{</span>      hash<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">of</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>hash<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        values<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> values<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown 语法 (简体中文版)</title>
      <link href="/2019/07/19/Markdown%20%E8%AF%AD%E6%B3%95%20(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%E7%89%88)/"/>
      <url>/2019/07/19/Markdown%20%E8%AF%AD%E6%B3%95%20(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%E7%89%88)/</url>
      
        <content type="html"><![CDATA[<p><strong>NOTE:</strong> This is Simplelified  Chinese Edition Document of Markdown Syntax. If you are seeking for English Edition Document. Please refer to <a href="http://daringfireball.net/projects/markdown/syntax" target="_blank" rel="noopener">Markdown: Syntax</a>.</p><p><strong>声明：</strong> 这份文档派生(fork)于<a href="http://markdown.tw/" target="_blank" rel="noopener">繁体中文版</a>，在此基础上进行了繁体转简体工作，并进行了适当的润色。此文档用 Markdown 语法编写，你可以到这里<a href="http://gitcafe.com/riku/Markdown-Syntax-CN/blob/master/syntax.md" target="_blank" rel="noopener">查看它的源文件</a>。「繁体中文版的原始文件可以<a href="https://github.com/othree/markdown-syntax-zhtw/blob/master/syntax.md" target="_blank" rel="noopener">查看这里</a> 。」–By @<a href="http://twitter.com/riku" target="_blank" rel="noopener">riku</a> / 本项目托管于 <a href="http://gitcafe.com/riku/Markdown-Syntax-CN" target="_blank" rel="noopener">GitCafe</a></p><p><strong>注：</strong> 本项目同时也托管于 <a href="https://github.com/riku/Markdown-Syntax-CN" target="_blank" rel="noopener">Github</a> 上，请通过 fork＋pull request 方式来帮忙改进本项目。</p><h1 id="Markdown-语法说明-简体中文版-点击查看快速入门"><a href="#Markdown-语法说明-简体中文版-点击查看快速入门" class="headerlink" title="Markdown 语法说明 (简体中文版) / (点击查看快速入门)"></a>Markdown 语法说明 (简体中文版) / (<a href="./markdown-basics.html">点击查看快速入门</a>)</h1><ul><li><a href="#overview">概述</a><ul><li><a href="#philosophy">宗旨</a></li><li><a href="#html">兼容 HTML</a></li><li><a href="#autoescape">特殊字符自动转换</a></li></ul></li><li><a href="#block">区块元素</a><ul><li><a href="#p">段落和换行</a></li><li><a href="#header">标题</a></li><li><a href="#blockquote">区块引用</a></li><li><a href="#list">列表</a></li><li><a href="#precode">代码区块</a></li><li><a href="#hr">分隔线</a></li></ul></li><li><a href="#span">区段元素</a><ul><li><a href="#link">链接</a></li><li><a href="#em">强调</a></li><li><a href="#code">代码</a></li><li><a href="#img">图片</a></li></ul></li><li><a href="#misc">其它</a><ul><li><a href="#backslash">反斜杠</a></li><li><a href="#autolink">自动链接</a></li></ul></li><li><a href="#acknowledgement">感谢</a></li></ul><hr><h2 id="overview">概述</h2><h3 id="philosophy">宗旨</h3><p>Markdown 的目标是实现「易读易写」。</p><p>可读性，无论如何，都是最重要的。一份使用 Markdown 格式撰写的文件应该可以直接以纯文本发布，并且看起来不会像是由许多标签或是格式指令所构成。Markdown 语法受到一些既有 text-to-HTML 格式的影响，包括 [Setext] <a href="http://docutils.sourceforge.net/mirror/setext.html" target="_blank" rel="noopener">1</a>、[atx] <a href="http://www.aaronsw.com/2002/atx/" target="_blank" rel="noopener">2</a>、[Textile] <a href="http://textism.com/tools/textile/" target="_blank" rel="noopener">3</a>、[reStructuredText] <a href="http://docutils.sourceforge.net/rst.html" target="_blank" rel="noopener">4</a>、[Grutatext] <a href="http://www.triptico.com/software/grutatxt.html" target="_blank" rel="noopener">5</a> 和 [EtText] <a href="http://ettext.taint.org/doc/" target="_blank" rel="noopener">6</a>，而最大灵感来源其实是纯文本电子邮件的格式。</p><p>总之， Markdown 的语法全由一些符号所组成，这些符号经过精挑细选，其作用一目了然。比如：在文字两旁加上星号，看起来就像*强调*。Markdown 的列表看起来，嗯，就是列表。Markdown 的区块引用看起来就真的像是引用一段文字，就像你曾在电子邮件中见过的那样。</p><h3 id="html">兼容 HTML</h3><p>Markdown 语法的目标是：成为一种适用于网络的<em>书写</em>语言。</p><p>Markdown 不是想要取代 HTML，甚至也没有要和它相近，它的语法种类很少，只对应 HTML 标记的一小部分。Markdown 的构想<em>不是</em>要使得 HTML 文档更容易书写。在我看来， HTML 已经很容易写了。Markdown 的理念是，能让文档更容易读、写和随意改。HTML 是一种<em>发布</em>的格式，Markdown 是一种<em>书写</em>的格式。就这样，Markdown 的格式语法只涵盖纯文本可以涵盖的范围。</p><p>不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。不需要额外标注这是 HTML 或是 Markdown；只要直接加标签就可以了。</p><p>要制约的只有一些 HTML 区块元素――比如 <code>&lt;div&gt;</code>、<code>&lt;table&gt;</code>、<code>&lt;pre&gt;</code>、<code>&lt;p&gt;</code> 等标签，必须在前后加上空行与其它内容区隔开，还要求它们的开始标签与结尾标签不能用制表符或空格来缩进。Markdown 的生成器有足够智能，不会在 HTML 区块标签外加上不必要的 <code>&lt;p&gt;</code> 标签。</p><p>例子如下，在 Markdown 文件里加上一段 HTML 表格：</p><pre><code>这是一个普通段落。&lt;table&gt;    &lt;tr&gt;        &lt;td&gt;Foo&lt;/td&gt;    &lt;/tr&gt;&lt;/table&gt;这是另一个普通段落。</code></pre><p>请注意，在 HTML 区块标签间的 Markdown 格式语法将不会被处理。比如，你在 HTML 区块内使用 Markdown 样式的<code>*强调*</code>会没有效果。</p><p>HTML 的区段（行内）标签如 <code>&lt;span&gt;</code>、<code>&lt;cite&gt;</code>、<code>&lt;del&gt;</code> 可以在 Markdown 的段落、列表或是标题里随意使用。依照个人习惯，甚至可以不用 Markdown 格式，而直接采用 HTML 标签来格式化。举例说明：如果比较喜欢 HTML 的 <code>&lt;a&gt;</code> 或 <code>&lt;img&gt;</code> 标签，可以直接使用这些标签，而不用 Markdown 提供的链接或是图像标签语法。</p><p>和处在 HTML 区块标签间不同，Markdown 语法在 HTML 区段标签间是有效的。</p><h3 id="autoescape">特殊字符自动转换</h3><p>在 HTML 文件中，有两个字符需要特殊处理： <code>&lt;</code> 和 <code>&amp;</code> 。 <code>&lt;</code> 符号用于起始标签，<code>&amp;</code> 符号则用于标记 HTML 实体，如果你只是想要显示这些字符的原型，你必须要使用实体的形式，像是 <code>&amp;lt;</code> 和 <code>&amp;amp;</code>。</p><p><code>&amp;</code> 字符尤其让网络文档编写者受折磨，如果你要打「<code>AT&amp;T</code>」 ，你必须要写成「<code>AT&amp;amp;T</code>」。而网址中的 <code>&amp;</code> 字符也要转换。比如你要链接到：</p><pre><code>http://images.google.com/images?num=30&amp;q=larry+bird</code></pre><p>你必须要把网址转换写为：</p><pre><code>http://images.google.com/images?num=30&amp;amp;q=larry+bird</code></pre><p>才能放到链接标签的 <code>href</code> 属性里。不用说也知道这很容易忽略，这也可能是 HTML 标准检验所检查到的错误中，数量最多的。</p><p>Markdown 让你可以自然地书写字符，需要转换的由它来处理好了。如果你使用的 <code>&amp;</code> 字符是 HTML 字符实体的一部分，它会保留原状，否则它会被转换成 <code>&amp;amp</code>;。</p><p>所以你如果要在文档中插入一个版权符号 <code>©</code>，你可以这样写：</p><pre><code>&amp;copy;</code></pre><p>Markdown 会保留它不动。而若你写：</p><pre><code>AT&amp;T</code></pre><p>Markdown 就会将它转为：</p><pre><code>AT&amp;amp;T</code></pre><p>类似的状况也会发生在 <code>&lt;</code> 符号上，因为 Markdown 允许 <a href="#html">兼容 HTML</a> ，如果你是把 <code>&lt;</code> 符号作为 HTML 标签的定界符使用，那 Markdown 也不会对它做任何转换，但是如果你写：</p><pre><code>4 &lt; 5</code></pre><p>Markdown 将会把它转换为：</p><pre><code>4 &amp;lt; 5</code></pre><p>不过需要注意的是，code 范围内，不论是行内还是区块， <code>&lt;</code> 和 <code>&amp;</code> 两个符号都<em>一定</em>会被转换成 HTML 实体，这项特性让你可以很容易地用 Markdown 写 HTML code （和 HTML 相对而言， HTML 语法中，你要把所有的 <code>&lt;</code> 和 <code>&amp;</code> 都转换为 HTML 实体，才能在 HTML 文件里面写出 HTML code。）</p><hr><h2 id="block">区块元素</h2><h3 id="p">段落和换行</h3><p>一个 Markdown 段落是由一个或多个连续的文本行组成，它的前后要有一个以上的空行（空行的定义是显示上看起来像是空的，便会被视为空行。比方说，若某一行只包含空格和制表符，则该行也会被视为空行）。普通段落不该用空格或制表符来缩进。</p><p>「由一个或多个连续的文本行组成」这句话其实暗示了 Markdown 允许段落内的强迫换行（插入换行符），这个特性和其他大部分的 text-to-HTML 格式不一样（包括 Movable Type 的「Convert Line Breaks」选项），其它的格式会把每个换行符都转成 <code>&lt;br /&gt;</code> 标签。</p><p>如果你<em>确实</em>想要依赖 Markdown 来插入 <code>&lt;br /&gt;</code> 标签的话，在插入处先按入两个以上的空格然后回车。</p><p>的确，需要多费点事（多加空格）来产生 <code>&lt;br /&gt;</code> ，但是简单地「每个换行都转换为 <code>&lt;br /&gt;</code>」的方法在 Markdown 中并不适合， Markdown 中 email 式的 <a href="#blockquote">区块引用</a> 和多段落的 <a href="#list">列表</a> 在使用换行来排版的时候，不但更好用，还更方便阅读。</p><h3 id="header">标题</h3><p>Markdown 支持两种标题的语法，类 [Setext] <a href="http://docutils.sourceforge.net/mirror/setext.html" target="_blank" rel="noopener">1</a> 和类 [atx] <a href="http://www.aaronsw.com/2002/atx/" target="_blank" rel="noopener">2</a> 形式。</p><p>类 Setext 形式是用底线的形式，利用 <code>=</code> （最高阶标题）和 <code>-</code> （第二阶标题），例如：</p><pre><code>This is an H1=============This is an H2-------------</code></pre><p>任何数量的 <code>=</code> 和 <code>-</code> 都可以有效果。</p><p>类 Atx 形式则是在行首插入 1 到 6 个 <code>#</code> ，对应到标题 1 到 6 阶，例如：</p><pre><code># 这是 H1## 这是 H2###### 这是 H6</code></pre><p>你可以选择性地「闭合」类 atx 样式的标题，这纯粹只是美观用的，若是觉得这样看起来比较舒适，你就可以在行尾加上 <code>#</code>，而行尾的 <code>#</code> 数量也不用和开头一样（行首的井字符数量决定标题的阶数）：</p><pre><code># 这是 H1 ### 这是 H2 ##### 这是 H3 ######</code></pre><h3 id="blockquote">区块引用 Blockquotes</h3><p>Markdown 标记区块引用是使用类似 email 中用 <code>&gt;</code> 的引用方式。如果你还熟悉在 email 信件中的引言部分，你就知道怎么在 Markdown 文件中建立一个区块引用，那会看起来像是你自己先断好行，然后在每行的最前面加上 <code>&gt;</code> ：</p><pre><code>&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,&gt; consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.&gt; Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.&gt; &gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse&gt; id sem consectetuer libero luctus adipiscing.</code></pre><p>Markdown 也允许你偷懒只在整个段落的第一行最前面加上 <code>&gt;</code> ：</p><pre><code>&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.&gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisseid sem consectetuer libero luctus adipiscing.</code></pre><p>区块引用可以嵌套（例如：引用内的引用），只要根据层次加上不同数量的 <code>&gt;</code> ：</p><pre><code>&gt; This is the first level of quoting.&gt;&gt; &gt; This is nested blockquote.&gt;&gt; Back to the first level.</code></pre><p>引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等：</p><pre><code>&gt; ## 这是一个标题。&gt; &gt; 1.   这是第一行列表项。&gt; 2.   这是第二行列表项。&gt; &gt; 给出一些例子代码：&gt; &gt;     return shell_exec(&quot;echo $input | $markdown_script&quot;);</code></pre><p>任何像样的文本编辑器都能轻松地建立 email 型的引用。例如在 BBEdit 中，你可以选取文字后然后从选单中选择<em>增加引用阶层</em>。</p><h3 id="list">列表</h3><p>Markdown 支持有序列表和无序列表。</p><p>无序列表使用星号、加号或是减号作为列表标记：</p><pre><code>*   Red*   Green*   Blue</code></pre><p>等同于：</p><pre><code>+   Red+   Green+   Blue</code></pre><p>也等同于：</p><pre><code>-   Red-   Green-   Blue</code></pre><p>有序列表则使用数字接着一个英文句点：</p><pre><code>1.  Bird2.  McHale3.  Parish</code></pre><p>很重要的一点是，你在列表标记上使用的数字并不会影响输出的 HTML 结果，上面的列表所产生的 HTML 标记为：</p><pre><code>&lt;ol&gt;&lt;li&gt;Bird&lt;/li&gt;&lt;li&gt;McHale&lt;/li&gt;&lt;li&gt;Parish&lt;/li&gt;&lt;/ol&gt;</code></pre><p>如果你的列表标记写成：</p><pre><code>1.  Bird1.  McHale1.  Parish</code></pre><p>或甚至是：</p><pre><code>3. Bird1. McHale8. Parish</code></pre><p>你都会得到完全相同的 HTML 输出。重点在于，你可以让 Markdown 文件的列表数字和输出的结果相同，或是你懒一点，你可以完全不用在意数字的正确性。</p><p>如果你使用懒惰的写法，建议第一个项目最好还是从 1. 开始，因为 Markdown 未来可能会支持有序列表的 start 属性。</p><p>列表项目标记通常是放在最左边，但是其实也可以缩进，最多 3 个空格，项目标记后面则一定要接着至少一个空格或制表符。</p><p>要让列表看起来更漂亮，你可以把内容用固定的缩进整理好：</p><pre><code>*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.    Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,    viverra nec, fringilla in, laoreet vitae, risus.*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.    Suspendisse id sem consectetuer libero luctus adipiscing.</code></pre><p>但是如果你懒，那也行：</p><pre><code>*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,viverra nec, fringilla in, laoreet vitae, risus.*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.Suspendisse id sem consectetuer libero luctus adipiscing.</code></pre><p>如果列表项目间用空行分开，在输出 HTML 时 Markdown 就会将项目内容用 <code>&lt;p&gt;</code><br>标签包起来，举例来说：</p><pre><code>*   Bird*   Magic</code></pre><p>会被转换为：</p><pre><code>&lt;ul&gt;&lt;li&gt;Bird&lt;/li&gt;&lt;li&gt;Magic&lt;/li&gt;&lt;/ul&gt;</code></pre><p>但是这个：</p><pre><code>*   Bird*   Magic</code></pre><p>会被转换为：</p><pre><code>&lt;ul&gt;&lt;li&gt;&lt;p&gt;Bird&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Magic&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</code></pre><p>列表项目可以包含多个段落，每个项目下的段落都必须缩进 4 个空格或是 1 个制表符：</p><pre><code>1.  This is a list item with two paragraphs. Lorem ipsum dolor    sit amet, consectetuer adipiscing elit. Aliquam hendrerit    mi posuere lectus.    Vestibulum enim wisi, viverra nec, fringilla in, laoreet    vitae, risus. Donec sit amet nisl. Aliquam semper ipsum    sit amet velit.2.  Suspendisse id sem consectetuer libero luctus adipiscing.</code></pre><p>如果你每行都有缩进，看起来会看好很多，当然，再次地，如果你很懒惰，Markdown 也允许：</p><pre><code>*   This is a list item with two paragraphs.    This is the second paragraph in the list item. You&#39;reonly required to indent the first line. Lorem ipsum dolorsit amet, consectetuer adipiscing elit.*   Another item in the same list.</code></pre><p>如果要在列表项目内放进引用，那 <code>&gt;</code> 就需要缩进：</p><pre><code>*   A list item with a blockquote:    &gt; This is a blockquote    &gt; inside a list item.</code></pre><p>如果要放代码区块的话，该区块就需要缩进<em>两次</em>，也就是 8 个空格或是 2 个制表符：</p><pre><code>*   一列表项包含一个列表区块：        &lt;代码写在这&gt;</code></pre><p>当然，项目列表很可能会不小心产生，像是下面这样的写法：</p><pre><code>1986. What a great season.</code></pre><p>换句话说，也就是在行首出现<em>数字-句点-空白</em>，要避免这样的状况，你可以在句点前面加上反斜杠。</p><pre><code>1986\. What a great season.</code></pre><h3 id="precode">代码区块</h3><p>和程序相关的写作或是标签语言原始码通常会有已经排版好的代码区块，通常这些区块我们并不希望它以一般段落文件的方式去排版，而是照原来的样子显示，Markdown 会用 <code>&lt;pre&gt;</code> 和 <code>&lt;code&gt;</code> 标签来把代码区块包起来。</p><p>要在 Markdown 中建立代码区块很简单，只要简单地缩进 4 个空格或是 1 个制表符就可以，例如，下面的输入：</p><pre><code>这是一个普通段落：    这是一个代码区块。</code></pre><p>Markdown 会转换成：</p><pre><code>&lt;p&gt;这是一个普通段落：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;这是一个代码区块。&lt;/code&gt;&lt;/pre&gt;</code></pre><p>这个每行一阶的缩进（4 个空格或是 1 个制表符），都会被移除，例如：</p><pre><code>Here is an example of AppleScript:    tell application &quot;Foo&quot;        beep    end tell</code></pre><p>会被转换为：</p><pre><code>&lt;p&gt;Here is an example of AppleScript:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;tell application &quot;Foo&quot;    beepend tell&lt;/code&gt;&lt;/pre&gt;</code></pre><p>一个代码区块会一直持续到没有缩进的那一行（或是文件结尾）。</p><p>在代码区块里面， <code>&amp;</code> 、 <code>&lt;</code> 和 <code>&gt;</code> 会自动转成 HTML 实体，这样的方式让你非常容易使用 Markdown 插入范例用的 HTML 原始码，只需要复制贴上，再加上缩进就可以了，剩下的 Markdown 都会帮你处理，例如：</p><pre><code>    &lt;div class=&quot;footer&quot;&gt;        &amp;copy; 2004 Foo Corporation    &lt;/div&gt;</code></pre><p>会被转换为：</p><pre><code>&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&quot;footer&quot;&amp;gt;    &amp;amp;copy; 2004 Foo Corporation&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;</code></pre><p>代码区块中，一般的 Markdown 语法不会被转换，像是星号便只是星号，这表示你可以很容易地以 Markdown 语法撰写 Markdown 语法相关的文件。</p><h3 id="hr">分隔线</h3><p>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：</p><pre><code>* * *********- - ----------------------------------------</code></pre><hr><h2 id="span">区段元素</h2><h3 id="link">链接</h3><p>Markdown 支持两种形式的链接语法： <em>行内式</em>和<em>参考式</em>两种形式。</p><p>不管是哪一种，链接文字都是用 [方括号] 来标记。</p><p>要建立一个<em>行内式</em>的链接，只要在方块括号后面紧接着圆括号并插入网址链接即可，如果你还想要加上链接的 title 文字，只要在网址后面，用双引号把 title 文字包起来即可，例如：</p><pre><code>This is [an example](http://example.com/ &quot;Title&quot;) inline link.[This link](http://example.net/) has no title attribute.</code></pre><p>会产生：</p><pre><code>&lt;p&gt;This is &lt;a href=&quot;http://example.com/&quot; title=&quot;Title&quot;&gt;an example&lt;/a&gt; inline link.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://example.net/&quot;&gt;This link&lt;/a&gt; has notitle attribute.&lt;/p&gt;</code></pre><p>如果你是要链接到同样主机的资源，你可以使用相对路径：</p><pre><code>See my [About](/about/) page for details.   </code></pre><p><em>参考式</em>的链接是在链接文字的括号后面再接上另一个方括号，而在第二个方括号里面要填入用以辨识链接的标记：</p><pre><code>This is [an example][id] reference-style link.</code></pre><p>你也可以选择性地在两个方括号中间加上一个空格：</p><pre><code>This is [an example] [id] reference-style link.</code></pre><p>接着，在文件的任意处，你可以把这个标记的链接内容定义出来：</p><pre><code>[id]: http://example.com/  &quot;Optional Title Here&quot;</code></pre><p>链接内容定义的形式为：</p><ul><li>方括号（前面可以选择性地加上至多三个空格来缩进），里面输入链接文字</li><li>接着一个冒号</li><li>接着一个以上的空格或制表符</li><li>接着链接的网址</li><li>选择性地接着 title 内容，可以用单引号、双引号或是括弧包着</li></ul><p>下面这三种链接的定义都是相同：</p><pre><code>[foo]: http://example.com/  &quot;Optional Title Here&quot;[foo]: http://example.com/  &#39;Optional Title Here&#39;[foo]: http://example.com/  (Optional Title Here)</code></pre><p><strong>请注意：</strong>有一个已知的问题是 Markdown.pl 1.0.1 会忽略单引号包起来的链接 title。</p><p>链接网址也可以用方括号包起来：</p><pre><code>[id]: &lt;http://example.com/&gt;  &quot;Optional Title Here&quot;</code></pre><p>你也可以把 title 属性放到下一行，也可以加一些缩进，若网址太长的话，这样会比较好看：</p><pre><code>[id]: http://example.com/longish/path/to/resource/here    &quot;Optional Title Here&quot;</code></pre><p>网址定义只有在产生链接的时候用到，并不会直接出现在文件之中。</p><p>链接辨别标签可以有字母、数字、空白和标点符号，但是并<em>不</em>区分大小写，因此下面两个链接是一样的：</p><pre><code>[link text][a][link text][A]</code></pre><p><em>隐式链接标记</em>功能让你可以省略指定链接标记，这种情形下，链接标记会视为等同于链接文字，要用隐式链接标记只要在链接文字后面加上一个空的方括号，如果你要让 “Google” 链接到 google.com，你可以简化成：</p><pre><code>[Google][]</code></pre><p>然后定义链接内容：</p><pre><code>[Google]: http://google.com/</code></pre><p>由于链接文字可能包含空白，所以这种简化型的标记内也许包含多个单词：</p><pre><code>Visit [Daring Fireball][] for more information.</code></pre><p>然后接着定义链接：</p><pre><code>[Daring Fireball]: http://daringfireball.net/</code></pre><p>链接的定义可以放在文件中的任何一个地方，我比较偏好直接放在链接出现段落的后面，你也可以把它放在文件最后面，就像是注解一样。</p><p>下面是一个参考式链接的范例：</p><pre><code>I get 10 times more traffic from [Google] [1] than from[Yahoo] [2] or [MSN] [3].  [1]: http://google.com/        &quot;Google&quot;  [2]: http://search.yahoo.com/  &quot;Yahoo Search&quot;  [3]: http://search.msn.com/    &quot;MSN Search&quot;</code></pre><p>如果改成用链接名称的方式写：</p><pre><code>I get 10 times more traffic from [Google][] than from[Yahoo][] or [MSN][].  [google]: http://google.com/        &quot;Google&quot;  [yahoo]:  http://search.yahoo.com/  &quot;Yahoo Search&quot;  [msn]:    http://search.msn.com/    &quot;MSN Search&quot;</code></pre><p>上面两种写法都会产生下面的 HTML。</p><pre><code>&lt;p&gt;I get 10 times more traffic from &lt;a href=&quot;http://google.com/&quot;title=&quot;Google&quot;&gt;Google&lt;/a&gt; than from&lt;a href=&quot;http://search.yahoo.com/&quot; title=&quot;Yahoo Search&quot;&gt;Yahoo&lt;/a&gt;or &lt;a href=&quot;http://search.msn.com/&quot; title=&quot;MSN Search&quot;&gt;MSN&lt;/a&gt;.&lt;/p&gt;</code></pre><p>下面是用行内式写的同样一段内容的 Markdown 文件，提供作为比较之用：</p><pre><code>I get 10 times more traffic from [Google](http://google.com/ &quot;Google&quot;)than from [Yahoo](http://search.yahoo.com/ &quot;Yahoo Search&quot;) or[MSN](http://search.msn.com/ &quot;MSN Search&quot;).</code></pre><p>参考式的链接其实重点不在于它比较好写，而是它比较好读，比较一下上面的范例，使用参考式的文章本身只有 81 个字符，但是用行内形式的却会增加到 176 个字元，如果是用纯 HTML 格式来写，会有 234 个字元，在 HTML 格式中，标签比文本还要多。</p><p>使用 Markdown 的参考式链接，可以让文件更像是浏览器最后产生的结果，让你可以把一些标记相关的元数据移到段落文字之外，你就可以增加链接而不让文章的阅读感觉被打断。</p><h3 id="em">强调</h3><p>Markdown 使用星号（<code>*</code>）和底线（<code>_</code>）作为标记强调字词的符号，被 <code>*</code> 或 <code>_</code> 包围的字词会被转成用 <code>&lt;em&gt;</code> 标签包围，用两个 <code>*</code> 或 <code>_</code> 包起来的话，则会被转成 <code>&lt;strong&gt;</code>，例如：</p><pre><code>*single asterisks*_single underscores_**double asterisks**__double underscores__</code></pre><p>会转成：</p><pre><code>&lt;em&gt;single asterisks&lt;/em&gt;&lt;em&gt;single underscores&lt;/em&gt;&lt;strong&gt;double asterisks&lt;/strong&gt;&lt;strong&gt;double underscores&lt;/strong&gt;</code></pre><p>你可以随便用你喜欢的样式，唯一的限制是，你用什么符号开启标签，就要用什么符号结束。</p><p>强调也可以直接插在文字中间：</p><pre><code>un*frigging*believable</code></pre><p>但是<strong>如果你的 <code>*</code> 和 <code>_</code> 两边都有空白的话，它们就只会被当成普通的符号</strong>。</p><p>如果要在文字前后直接插入普通的星号或底线，你可以用反斜线：</p><pre><code>\*this text is surrounded by literal asterisks\*</code></pre><h3 id="code">代码</h3><p>如果要标记一小段行内代码，你可以用反引号把它包起来（<code>`</code>），例如：</p><pre><code>Use the `printf()` function.</code></pre><p>会产生：</p><pre><code>&lt;p&gt;Use the &lt;code&gt;printf()&lt;/code&gt; function.&lt;/p&gt;</code></pre><p>如果要在代码区段内插入反引号，你可以用多个反引号来开启和结束代码区段：</p><pre><code>``There is a literal backtick (`) here.``</code></pre><p>这段语法会产生：</p><pre><code>&lt;p&gt;&lt;code&gt;There is a literal backtick (`) here.&lt;/code&gt;&lt;/p&gt;</code></pre><p>代码区段的起始和结束端都可以放入一个空白，起始端后面一个，结束端前面一个，这样你就可以在区段的一开始就插入反引号：</p><pre><code>A single backtick in a code span: `` ` ``A backtick-delimited string in a code span: `` `foo` ``</code></pre><p>会产生：</p><pre><code>&lt;p&gt;A single backtick in a code span: &lt;code&gt;`&lt;/code&gt;&lt;/p&gt;&lt;p&gt;A backtick-delimited string in a code span: &lt;code&gt;`foo`&lt;/code&gt;&lt;/p&gt;</code></pre><p>在代码区段内，<code>&amp;</code> 和方括号<strong>都</strong>会被自动地转成 HTML 实体，这使得插入 HTML 原始码变得很容易，Markdown 会把下面这段：</p><pre><code>Please don&#39;t use any `&lt;blink&gt;` tags.</code></pre><p>转为：</p><pre><code>&lt;p&gt;Please don&#39;t use any &lt;code&gt;&amp;lt;blink&amp;gt;&lt;/code&gt; tags.&lt;/p&gt;</code></pre><p>你也可以这样写：</p><pre><code>`&amp;#8212;` is the decimal-encoded equivalent of `&amp;mdash;`.</code></pre><p>以产生：</p><pre><code>&lt;p&gt;&lt;code&gt;&amp;amp;#8212;&lt;/code&gt; is the decimal-encodedequivalent of &lt;code&gt;&amp;amp;mdash;&lt;/code&gt;.&lt;/p&gt;</code></pre><h3 id="img">图片</h3><p>很明显地，要在纯文字应用中设计一个「自然」的语法来插入图片是有一定难度的。</p><p>Markdown 使用一种和链接很相似的语法来标记图片，同样也允许两种样式： <em>行内式</em>和<em>参考式</em>。</p><p>行内式的图片语法看起来像是：</p><pre><code>![Alt text](/path/to/img.jpg)![Alt text](/path/to/img.jpg &quot;Optional title&quot;)</code></pre><p>详细叙述如下：</p><ul><li>一个惊叹号 <code>!</code></li><li>接着一个方括号，里面放上图片的替代文字</li><li>接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上<br>选择性的 ‘title’ 文字。</li></ul><p>参考式的图片语法则长得像这样：</p><pre><code>![Alt text][id]</code></pre><p>「id」是图片参考的名称，图片参考的定义方式则和连结参考一样：</p><pre><code>[id]: url/to/image  &quot;Optional title attribute&quot;</code></pre><p>到目前为止， Markdown 还没有办法指定图片的宽高，如果你需要的话，你可以使用普通的 <code>&lt;img&gt;</code> 标签。</p><hr><h2 id="misc">其它</h2><h3 id="autolink">自动链接</h3><p>Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用方括号包起来， Markdown 就会自动把它转成链接。一般网址的链接文字就和链接地址一样，例如：</p><pre><code>&lt;http://example.com/&gt;</code></pre><p>Markdown 会转为：</p><pre><code>&lt;a href=&quot;http://example.com/&quot;&gt;http://example.com/&lt;/a&gt;</code></pre><p>邮址的自动链接也很类似，只是 Markdown 会先做一个编码转换的过程，把文字字符转成 16 进位码的 HTML 实体，这样的格式可以糊弄一些不好的邮址收集机器人，例如：</p><pre><code>&lt;address@example.com&gt;</code></pre><p>Markdown 会转成：</p><pre><code>&lt;a href=&quot;&amp;#x6D;&amp;#x61;i&amp;#x6C;&amp;#x74;&amp;#x6F;:&amp;#x61;&amp;#x64;&amp;#x64;&amp;#x72;&amp;#x65;&amp;#115;&amp;#115;&amp;#64;&amp;#101;&amp;#120;&amp;#x61;&amp;#109;&amp;#x70;&amp;#x6C;e&amp;#x2E;&amp;#99;&amp;#111;&amp;#109;&quot;&gt;&amp;#x61;&amp;#x64;&amp;#x64;&amp;#x72;&amp;#x65;&amp;#115;&amp;#115;&amp;#64;&amp;#101;&amp;#120;&amp;#x61;&amp;#109;&amp;#x70;&amp;#x6C;e&amp;#x2E;&amp;#99;&amp;#111;&amp;#109;&lt;/a&gt;</code></pre><p>在浏览器里面，这段字串（其实是 <code>&lt;a href=&quot;mailto:address@example.com&quot;&gt;address@example.com&lt;/a&gt;</code>）会变成一个可以点击的「<a href="mailto:address@example.com" target="_blank" rel="noopener">address@example.com</a>」链接。</p><p>（这种作法虽然可以糊弄不少的机器人，但并不能全部挡下来，不过总比什么都不做好些。不管怎样，公开你的信箱终究会引来广告信件的。）</p><h3 id="backslash">反斜杠</h3><p>Markdown 可以利用反斜杠来插入一些在语法中有其它意义的符号，例如：如果你想要用星号加在文字旁边的方式来做出强调效果（但不用 <code>&lt;em&gt;</code> 标签），你可以在星号的前面加上反斜杠：</p><pre><code>\*literal asterisks\*</code></pre><p>Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：</p><pre><code>\   反斜线`   反引号*   星号_   底线{}  花括号[]  方括号()  括弧#   井字号+   加号-   减号.   英文句点!   惊叹号</code></pre><h2 id="acknowledgement">感谢</h2><p>感谢 <a href="https://twitter.com/#!/leafy7382" target="_blank" rel="noopener">leafy7382</a> 协助翻译，<a href="http://iamhlb.com/" target="_blank" rel="noopener">hlb</a>、<a href="http://twitter.com/randylien" target="_blank" rel="noopener">Randylien</a> 帮忙润稿，<a href="https://twitter.com/#!/ethantw" target="_blank" rel="noopener">ethantw</a> 的<a href="http://ethantw.net/projects/han/" target="_blank" rel="noopener">汉字标准格式・CSS Reset</a>， <a href="http://kidwm.net/" target="_blank" rel="noopener">WM</a> 回报文字错误。</p><p>感谢 <a href="https://github.com/fenprace" target="_blank" rel="noopener">fenprace</a>，<a href="https://github.com/addv" target="_blank" rel="noopener">addv</a>。</p>]]></content>
      
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown 快速入门</title>
      <link href="/2019/07/19/Markdown%20%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
      <url>/2019/07/19/Markdown%20%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<p><strong>声明：</strong> 这份文档派生(fork)于<a href="http://markdown.tw/" target="_blank" rel="noopener">繁体中文版</a>，在此基础上进行了繁体转简体工作，并进行了适当的润色。此文档用 Markdown 语法编写，你可以到这里<a href="http://gitcafe.com/riku/Markdown-Syntax-CN/blob/master/basics.md" target="_blank" rel="noopener">查看它的源文件</a>。「繁体中文版的原始文件可以<a href="https://github.com/othree/markdown-syntax-zhtw/blob/master/basics.md" target="_blank" rel="noopener">查看这里</a>」–By @<a href="http://twitter.com/riku" target="_blank" rel="noopener">riku</a> / 本项目托管于 <a href="http://gitcafe.com/riku/Markdown-Syntax-CN" target="_blank" rel="noopener">GitCafe</a></p><p><strong>注：</strong> 本项目同时也托管于 <a href="https://github.com/riku/Markdown-Syntax-CN" target="_blank" rel="noopener">Github</a>上，请通过 fork＋pull request 方式来帮忙改进本项目。</p><h1 id="Markdown-Basics-（快速入门）-点击查看完整语法说明"><a href="#Markdown-Basics-（快速入门）-点击查看完整语法说明" class="headerlink" title="Markdown: Basics （快速入门） / (点击查看完整语法说明)"></a>Markdown: Basics （快速入门） / (<a href="./markdown-syntax.html">点击查看完整语法说明</a>)</h1><h2 id="Getting-the-Gist-of-Markdown’s-Formatting-Syntax"><a href="#Getting-the-Gist-of-Markdown’s-Formatting-Syntax" class="headerlink" title="Getting the Gist of Markdown’s Formatting Syntax"></a>Getting the Gist of Markdown’s Formatting Syntax</h2><p>此页提供了 Markdown 的简单概念， <a href="http://gitcafe.com/riku/Markdown-Syntax-CN/blob/master/syntax.md" title="Markdown Syntax" target="_blank" rel="noopener">语法说明</a> 页提供了完整详细的文档，说明了每项功能。但是 Markdown 其实很简单就可以上手，此页文档提供了一些范例，并且每个范例都会提供输出的 HTML 结果。</p><p>其实直接试试看也是一个很不错的方法， <a href="http://daringfireball.net/projects/markdown/dingus" title="Markdown Dingus" target="_blank" rel="noopener">Dingus</a> 是一个网页应用程序，你可以把自已编写的 Markdown 文档转成 XHTML。</p><h2 id="段落、标题、区块代码"><a href="#段落、标题、区块代码" class="headerlink" title="段落、标题、区块代码"></a>段落、标题、区块代码</h2><p>一个段落是由一个以上的连接的行句组成，而一个以上的空行则会划分出不同的段落（空行的定义是显示上看起来像是空行，就被视为空行，例如有一行只有空白和 tab，那该行也会被视为空行），一般的段落不需要用空白或换行缩进。</p><p>Markdown 支持两种标题的语法，[Setext] <a href="http://docutils.sourceforge.net/mirror/setext.html" target="_blank" rel="noopener">1</a> 和 [atx] <a href="http://www.aaronsw.com/2002/atx/" target="_blank" rel="noopener">2</a> 形式。Setext 形式是用底线的形式，利用 <code>=</code> （最高阶标题）和 <code>-</code> （第二阶标题），Atx 形式在行首插入 1 到 6 个 <code>#</code> ，对应到标题 1 到 6 阶。</p><p>区块引用则使用 email 形式的 ‘<code>&gt;</code>‘ 角括号。</p><p>Markdown 语法:</p><pre><code>A First Level Header====================A Second Level Header---------------------Now is the time for all good men to come tothe aid of their country. This is just aregular paragraph.The quick brown fox jumped over the lazydog&#39;s back.### Header 3&gt; This is a blockquote.&gt; &gt; This is the second paragraph in the blockquote.&gt;&gt; ## This is an H2 in a blockquote</code></pre><p>输出 HTML 为：</p><pre><code>&lt;h1&gt;A First Level Header&lt;/h1&gt;&lt;h2&gt;A Second Level Header&lt;/h2&gt;&lt;p&gt;Now is the time for all good men to come tothe aid of their country. This is just aregular paragraph.&lt;/p&gt;&lt;p&gt;The quick brown fox jumped over the lazydog&#39;s back.&lt;/p&gt;&lt;h3&gt;Header 3&lt;/h3&gt;&lt;blockquote&gt;&lt;p&gt;This is a blockquote.&lt;/p&gt;&lt;p&gt;This is the second paragraph in the blockquote.&lt;/p&gt;&lt;h2&gt;This is an H2 in a blockquote&lt;/h2&gt;&lt;/blockquote&gt;</code></pre><h3 id="修辞和强调"><a href="#修辞和强调" class="headerlink" title="修辞和强调"></a>修辞和强调</h3><p>Markdown 使用星号和底线来标记需要强调的区段。</p><p>Markdown 语法:</p><pre><code>Some of these words *are emphasized*.Some of these words _are emphasized also_.Use two asterisks for **strong emphasis**.Or, if you prefer, __use two underscores instead__.</code></pre><p>输出 HTML 为:</p><pre><code>&lt;p&gt;Some of these words &lt;em&gt;are emphasized&lt;/em&gt;.Some of these words &lt;em&gt;are emphasized also&lt;/em&gt;.&lt;/p&gt;&lt;p&gt;Use two asterisks for &lt;strong&gt;strong emphasis&lt;/strong&gt;.Or, if you prefer, &lt;strong&gt;use two underscores instead&lt;/strong&gt;.&lt;/p&gt;</code></pre><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>无序列表使用星号、加号和减号来做为列表的项目标记，这些符号是都可以使用的，使用星号：</p><pre><code>* Candy.* Gum.* Booze.</code></pre><p>加号：</p><pre><code>+ Candy.+ Gum.+ Booze.</code></pre><p>和减号</p><pre><code>- Candy.- Gum.- Booze.</code></pre><p>都会输出 HTML 为：</p><pre><code>&lt;ul&gt;&lt;li&gt;Candy.&lt;/li&gt;&lt;li&gt;Gum.&lt;/li&gt;&lt;li&gt;Booze.&lt;/li&gt;&lt;/ul&gt;</code></pre><p>有序的列表则是使用一般的数字接着一个英文句点作为项目标记：</p><pre><code>1. Red2. Green3. Blue</code></pre><p>输出 HTML 为：</p><pre><code>&lt;ol&gt;&lt;li&gt;Red&lt;/li&gt;&lt;li&gt;Green&lt;/li&gt;&lt;li&gt;Blue&lt;/li&gt;&lt;/ol&gt;</code></pre><p>如果你在项目之间插入空行，那项目的内容会用 <code>&lt;p&gt;</code> 包起来，你也可以在一个项目内放上多个段落，只要在它前面缩排 4 个空白或 1 个 tab 。</p><pre><code>* A list item.With multiple paragraphs.* Another item in the list.</code></pre><p>输出 HTML 为：</p><pre><code>&lt;ul&gt;&lt;li&gt;&lt;p&gt;A list item.&lt;/p&gt;&lt;p&gt;With multiple paragraphs.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Another item in the list.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</code></pre><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>Markdown 支援两种形式的链接语法： <em>行内</em> 和 <em>参考</em> 两种形式，两种都是使用角括号来把文字转成连结。</p><p>行内形式是直接在后面用括号直接接上链接：</p><pre><code>This is an [example link](http://example.com/).</code></pre><p>输出 HTML 为：</p><pre><code>&lt;p&gt;This is an &lt;a href=&quot;http://example.com/&quot;&gt;example link&lt;/a&gt;.&lt;/p&gt;</code></pre><p>你也可以选择性的加上 title 属性：</p><pre><code>This is an [example link](http://example.com/ &quot;With a Title&quot;).</code></pre><p>输出 HTML 为：</p><pre><code>&lt;p&gt;This is an &lt;a href=&quot;http://example.com/&quot; title=&quot;With a Title&quot;&gt;example link&lt;/a&gt;.&lt;/p&gt;</code></pre><p>参考形式的链接让你可以为链接定一个名称，之后你可以在文件的其他地方定义该链接的内容：</p><pre><code>I get 10 times more traffic from [Google][1] than from[Yahoo][2] or [MSN][3].[1]: http://google.com/ &quot;Google&quot;[2]: http://search.yahoo.com/ &quot;Yahoo Search&quot;[3]: http://search.msn.com/ &quot;MSN Search&quot;</code></pre><p>输出 HTML 为：</p><pre><code>&lt;p&gt;I get 10 times more traffic from &lt;a href=&quot;http://google.com/&quot;title=&quot;Google&quot;&gt;Google&lt;/a&gt; than from &lt;a href=&quot;http://search.yahoo.com/&quot;title=&quot;Yahoo Search&quot;&gt;Yahoo&lt;/a&gt; or &lt;a href=&quot;http://search.msn.com/&quot;title=&quot;MSN Search&quot;&gt;MSN&lt;/a&gt;.&lt;/p&gt;</code></pre><p>title 属性是选择性的，链接名称可以用字母、数字和空格，但是不分大小写：</p><pre><code>I start my morning with a cup of coffee and[The New York Times][NY Times].[ny times]: http://www.nytimes.com/</code></pre><p>输出 HTML 为：</p><pre><code>&lt;p&gt;I start my morning with a cup of coffee and&lt;a href=&quot;http://www.nytimes.com/&quot;&gt;The New York Times&lt;/a&gt;.&lt;/p&gt;</code></pre><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p>图片的语法和链接很像。</p><p>行内形式（title 是选择性的）：</p><pre><code>![alt text](/path/to/img.jpg &quot;Title&quot;)</code></pre><p>参考形式：</p><pre><code>![alt text][id][id]: /path/to/img.jpg &quot;Title&quot;</code></pre><p>上面两种方法都会输出 HTML 为：</p><pre><code>&lt;img src=&quot;/path/to/img.jpg&quot; alt=&quot;alt text&quot; title=&quot;Title&quot; /&gt;</code></pre><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>在一般的段落文字中，你可以使用反引号 <code>`</code> 来标记代码区段，区段内的 <code>&amp;</code>、<code>&lt;</code> 和 <code>&gt;</code> 都会被自动的转换成 HTML 实体，这项特性让你可以很容易的在代码区段内插入 HTML 码：</p><pre><code>I strongly recommend against using any `&lt;blink&gt;` tags.I wish SmartyPants used named entities like `&amp;mdash;`instead of decimal-encoded entites like `&amp;#8212;`.</code></pre><p>输出 HTML 为：</p><pre><code>&lt;p&gt;I strongly recommend against using any&lt;code&gt;&amp;lt;blink&amp;gt;&lt;/code&gt; tags.&lt;/p&gt;&lt;p&gt;I wish SmartyPants used named entities like&lt;code&gt;&amp;amp;mdash;&lt;/code&gt; instead of decimal-encodedentites like &lt;code&gt;&amp;amp;#8212;&lt;/code&gt;.&lt;/p&gt;</code></pre><p>如果要建立一个已经格式化好的代码区块，只要每行都缩进 4 个空格或是一个 tab 就可以了，而 <code>&amp;</code>、<code>&lt;</code> 和 <code>&gt;</code> 也一样会自动转成 HTML 实体。</p><p>Markdown 语法:</p><pre><code>If you want your page to validate under XHTML 1.0 Strict,you&#39;ve got to put paragraph tags in your blockquotes:&lt;blockquote&gt;&lt;p&gt;For example.&lt;/p&gt;&lt;/blockquote&gt;</code></pre><p>输出 HTML 为：</p><pre><code>&lt;p&gt;If you want your page to validate under XHTML 1.0 Strict,you&#39;ve got to put paragraph tags in your blockquotes:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;blockquote&amp;gt;&amp;lt;p&amp;gt;For example.&amp;lt;/p&amp;gt;&amp;lt;/blockquote&amp;gt;&lt;/code&gt;&lt;/pre&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>程序员推荐书籍</title>
      <link href="/2019/07/19/%E7%A8%8B%E5%BA%8F%E5%91%98%E6%8E%A8%E8%8D%90%E4%B9%A6%E7%B1%8D/"/>
      <url>/2019/07/19/%E7%A8%8B%E5%BA%8F%E5%91%98%E6%8E%A8%E8%8D%90%E4%B9%A6%E7%B1%8D/</url>
      
        <content type="html"><![CDATA[<p>编者按：2008年8月4日，StackOverflow 网友 Bert F 发帖提问：哪本最具影响力的书，是每个程序员都应该读的？</p><blockquote><p>“如果能时光倒流，回到过去，作为一个开发人员，你可以告诉自己在职业生涯初期应该读一本，<br>你会选择哪本书呢？我希望这个书单列表内容丰富，可以涵盖很多东西。”</p></blockquote><p>很多<a href="http://coolshell.info" target="_blank" rel="noopener">程序员</a>响应，他们在推荐时也写下自己的评语。<br>以前就有国内网友介绍这个程序员书单，不过都是推荐数 Top 10的书。</p><p>其实除了前10本之外，推荐数前30左右的书籍都算经典，笔者整理编译这个问答贴，同时摘译部分推荐人的评语。</p><p>下面就按照各本书的推荐数排列。</p><h2 id="1、《代码大全》-史蒂夫·迈克康奈尔"><a href="#1、《代码大全》-史蒂夫·迈克康奈尔" class="headerlink" title="1、《代码大全》 史蒂夫·迈克康奈尔"></a>1、《<a href="http://t.cn/zOEs03N" target="_blank" rel="noopener">代码大全</a>》 史蒂夫·迈克康奈尔</h2><p>推荐数：1684</p><blockquote><p>“优秀的编程实践的百科全书，《<a href="http://t.cn/zOEs03N" target="_blank" rel="noopener">代码大全</a>》注重个人技术，其中所有东西加起来，<br>就是我们本能所说的“编写整洁的代码”。这本书有50页在谈论代码布局。” —— Joel Spolsky</p></blockquote><blockquote><p>对于新手来说，这本书中的观念有点高阶了。到你准备阅读此书时，你应该已经知道并实践过书中99%的观念。– esac</p></blockquote><p>Steve McConnell的原作《代码大全》(第1版)是公认的关于编程的最佳实践指南之一，<br>在过去的十多年间，本书一直在帮助开发人员编写更好的软件。</p><p>现在，作者将这本经典著作全新演绎，融入了最前沿的实践技术，加入了上百个崭新的代码示例，<br>充分展示了软件构建的艺术性和科学性。<br>McConnell汇集了来自研究机构、学术界以及业界日常实践的主要知识，<br>把最高效的技术和最重要的原理交织融会为这本既清晰又实用的指南。</p><p>无论您的经验水平如何，也不管您在怎样的开发环境中工作，也无论项目是大是小，<br>本书都将激发您的思维并帮助您构建高品质的代码。</p><p>《<a href="(http://t.cn/zOEs03N)">代码大全（第2版）</a>》做了全面的更新，增加了很多与时俱进的内容，包括对新语言、新的开发过程与方法论的讨论等等。</p><h2 id="2、《程序员修炼之道》"><a href="#2、《程序员修炼之道》" class="headerlink" title="2、《程序员修炼之道》"></a>2、《<a href="http://t.cn/zOEslD9" target="_blank" rel="noopener">程序员修炼之道</a>》</h2><p>推荐数：1504</p><p>对于那些已经学习过编程机制的程序员来说，这是一本卓越的书。<br>或许他们还是在校生，但对要自己做什么，还感觉不是很安全。</p><blockquote><p>就像草图和架构之间的差别。虽然你在学校课堂上学到的是画图，你也可以画的很漂亮，<br>但如果你觉得你不太知道从哪儿下手，如果某人要你独自画一个P2P的音乐交换网络图，那这本书就适合你了。—— Joel</p></blockquote><p>《程序员修炼之道:从小工到专家》内容简介：《程序员修炼之道》由一系列独立的部分组成，<br>涵盖的主题从个人责任、职业发展，知道用于使代码保持灵活、并且易于改编和复用的各种架构技术，<br>利用许多富有娱乐性的奇闻轶事、有思想性的例子及有趣的类比，<br>全面阐释了软件开发的许多不同方面的最佳实践和重大陷阱。</p><p>无论你是初学者，是有经验的程序员，还是软件项目经理，《程序员修炼之道:从小工到专家》都适合你阅读。</p><h2 id="3、《计算机程序的构造和解释》"><a href="#3、《计算机程序的构造和解释》" class="headerlink" title="3、《计算机程序的构造和解释》"></a>3、《<a href="http://t.cn/zOEsYcs" target="_blank" rel="noopener">计算机程序的构造和解释</a>》</h2><p>推荐数：916</p><p>就个人而言，这本书目前为止对我影响醉倒的一本编程书。</p><p>《代码大全》、《重构》和《设计模式》这些经典书会教给你高效的工作习惯和交易细节。<br>其他像《人件集》、《计算机编程心理学》和《人月神话》这些书会深入软件开发的心理层面。<br>其他书籍则处理算法。这些书都有自己所属的位置。</p><p>然而《计算机程序的构造和解释》与这些不同。<br>这是一本会启发你的书，它会燃起你编写出色程序的热情；<br>它还将教会你认识并欣赏美；<br>它会让你有种敬畏，让你难以抑制地渴望学习更多的东西。</p><p>其他书或许会让你成为一位更出色的程序员，但此书将一定会让你成为一名程序员。</p><p>同时，你将会学到其他东西，函数式编程（第三章）、惰性计算、元编程、虚拟机、解释器和编译器。</p><p>一些人认为此书不适合新手。<br>个人认为，虽然我并不完全认同要有一些编程经验才能读此书，但我还是一定推荐给初学者。<br>毕竟这本书是写给著名的6.001，是麻省理工学院的入门编程课程。<br>此书或许需要多做努力（尤其你在做练习的时候，你也应当如此），但这个价是对得起这本书的。</p><h2 id="4、《C程序设计语言》"><a href="#4、《C程序设计语言》" class="headerlink" title="4、《C程序设计语言》"></a>4、《<a href="http://t.cn/zOEsHqb" target="_blank" rel="noopener">C程序设计语言</a>》</h2><p>推荐数：774</p><blockquote><p>这本书简洁易读，会教给你三件事：C 编程语言；如何像程序员一样思考；底层计算模型。<br>（这对理解“底层”非常重要）—— Nathan</p></blockquote><p>《C程序设计语言》(第2版新版)讲述深入浅出，配合典型例证，通俗易懂，实用性强，<br>适合作为大专院校计算机专业或非计算机专业的C语言教材，也可以作为从事计算机相关软硬件开发的技术人员的参考书。</p><p>《C程序设计语言》(第2版新版)原著即为C语言的设计者之一Dennis M.Ritchie和著名的计算机科学家Brian W.Kernighan合著的<br>一本介绍C语言的权威经典著作。<br>我们现在见到的大量论述C语言程序设计的教材和专著均以此书为蓝本。<br>原著第1版中介绍的C语言成为后来广泛使用的C语言版本——标准C的基础。</p><p>人们熟知的“hello,world”程序就是由本书首次引入的，现在，这一程序已经成为所有程序设计语言入门的第一课。</p><h2 id="5、《算法导论》"><a href="#5、《算法导论》" class="headerlink" title="5、《算法导论》"></a>5、《<a href="http://t.cn/zOEsQAn" target="_blank" rel="noopener">算法导论</a>》</h2><p>推荐数：671</p><p>《代码大全》教你如何正确编程；<br>《人月神话》教你如何正确管理；<br>《设计模式》教你如何正确设计……</p><p>在我看来，代码只是一个工具，并非精髓。<br>开发软件的主要部分是创建新算法或重新实现现有算法。<br>其他部分则像重新组装乐高砖块或创建“管理”层。</p><blockquote><p>我依然梦想这样的工作，我的大部分时间（&gt;50%）是在写算法，其他“管理”细节则留给其他人…… —— Ran Biron</p></blockquote><ul><li>经典的算法书,被亚马逊网，《程序员》等评选为2006年最受读者喜爱的十大IT图书之一。</li><li>算法领域的标准教材，全球多所知名大学选用</li><li>MIT名师联手铸就，被誉为“计算机算法的圣经”</li><li>编写上采用了“五个一”，即一章介绍一个算法、一种设计技术、一个应用领域和一个相关话题。</li></ul><h2 id="6、《重构：改善既有代码的设计》"><a href="#6、《重构：改善既有代码的设计》" class="headerlink" title="6、《重构：改善既有代码的设计》"></a>6、《<a href="http://t.cn/zOEs8Lu" target="_blank" rel="noopener">重构：改善既有代码的设计</a>》</h2><p>推荐数：617</p><p>《重构:改善既有代码的设计》清晰地揭示了重构的过程，解释了重构的原理和最佳实践方式，<br>并给出了何时以及何地应该开始挖掘代码以求改善。<br>书中给出了70多个可行的重构，每个重构都介绍了一种经过验证的代码变换手法的动机和技术。</p><p>《重构:改善既有代码的设计》提出的重构准则将帮助你一次一小步地修改你的代码，从而减少了开发过程中的风险。</p><p>《重构:改善既有代码的设计》适合软件开发人员、项目管理人员等阅读，<br>也可作为高等院校计算机及相关专业师生的参考读物。</p><blockquote><p>我想我不得不推荐《重构》：改进现有代码的设计。—— Martin</p></blockquote><blockquote><p>我必须承认，我最喜欢的编程语录是出自这本书：任何一个傻瓜都能写出计算机能理解的程序，<br>而优秀的程序员却能写出别人能读得懂的程序。—— Martin Fowler</p></blockquote><h2 id="7、《设计模式》"><a href="#7、《设计模式》" class="headerlink" title="7、《设计模式》"></a>7、《<a href="http://t.cn/zOEs8k1" target="_blank" rel="noopener">设计模式</a>》</h2><p>推荐数：617</p><p>自1995年出版以来，本书一直名列Amazon和各大书店销售榜前列。<br>近10年后，本书仍是Addison-Wesley公司2003年最畅销的图书之一。<br>中文版销售逾4万册。</p><blockquote><p>就我而言，我认为四人帮编著的《设计模式》是一本极为有用的书。<br>虽然此书并不像其他建议一样有关“元”编程，但它强调封装诸如模式一类的优秀编程技术，<br>因而鼓励其他人提出新模式和反模式（antipatterns），并运用于编程对话中。—— Chris Jester-Young</p></blockquote><h2 id="8、《人月神话》"><a href="#8、《人月神话》" class="headerlink" title="8、《人月神话》"></a>8、《<a href="http://t.cn/zOEsR1z" target="_blank" rel="noopener">人月神话</a>》</h2><p>推荐数：588</p><p>在软件领域，很少能有像《人月神话》一样具有深远影响力并且畅销不衰的著作。</p><p>Brooks博士为人们管理复杂项目提供了最具洞察力的见解。<br>既有很多发人深省的观点，又有大量软件工程的实践。<br>本书内容来自Brooks博士在IBM公司System/360家族和OS/360中的项目管理经验。</p><p>该书英文原版一经面世，即引起业内人士的强烈反响，后又译为德、法、日、俄中等多种语言，全球销量数百万册。<br>确立了其在行业内的经典地位。</p><h2 id="9、《计算机程序设计艺术》"><a href="#9、《计算机程序设计艺术》" class="headerlink" title="9、《计算机程序设计艺术》"></a>9、《<a href="http://t.cn/zOEsExR" target="_blank" rel="noopener">计算机程序设计艺术</a>》</h2><p>推荐数：542</p><p>《计算机程序设计艺术》系列著作对计算机领域产生了深远的影响。<br>这一系列堪称一项浩大的工程，自1962年开始编写，计划出版7卷，目前已经出版了4卷。</p><p>《美国科学家》杂志曾将这套书与爱因斯坦的《相对论》等书并列称为20世纪最重要的12本物理学著作。<br>目前Knuth正将毕生精力投入到这部史诗性著作的撰写中。</p><blockquote><p>这是高德纳倾注心血写的一本书。—— Peter Coulton</p></blockquote><h2 id="10、《编译原理》（龙书）"><a href="#10、《编译原理》（龙书）" class="headerlink" title="10、《编译原理》（龙书）"></a>10、《<a href="http://t.cn/zOEsEFG" target="_blank" rel="noopener">编译原理</a>》（龙书）</h2><p>推荐数：462</p><p>我很奇怪，居然没人提到龙书。（或许已有推荐，我没有看到）。<br>我从没忘过此书的第一版封面。<br>此书让我知道了编译器是多么地神奇绝妙。- DB</p><h2 id="11、《深入浅出设计模式》"><a href="#11、《深入浅出设计模式》" class="headerlink" title="11、《深入浅出设计模式》"></a>11、《<a href="http://t.cn/zOnvX9N" target="_blank" rel="noopener">深入浅出设计模式</a>》</h2><p>推荐数：445</p><p>强大的写作阵容。</p><ul><li>《Head First设计模式》(中文版) 作者Eric Freeman；</li><li>ElElisabeth Freeman是作家、讲师和技术顾问。</li><li>Eric拥有耶鲁大学的计算机科学博士学位，E1isabath拥有耶鲁大学的计算机科学硕士学位。</li><li>Kathy Sierra(javaranch．com的创始人)FHBert Bates是畅销的HeadFirst系列书籍的创立者，也是Sun公司Java开发员认证考试的开发者。</li></ul><p>本书的产品设计应用神经生物学、认知科学，以及学习理论，这使得这本书能够将这些知识深深地印在你的脑海里，<br>不容易被遗忘。</p><p>本书的编写方式采用引导式教学，不直接告诉你该怎么做，而是利用故事当作引子，带领读者思考并想办法解决问题。<br>解决问题的过程中又会产生一些新的问题，再继续思考、继续解决问题，这样可以加深体会。</p><p>作者以大量的生活化故事当背景，例如第1章是鸭子，第2章是气象站，第3章是咖啡店，<br>书中搭配大量的插图(几乎每一页都有图)，所以阅读起来生动有趣，不会感觉到昏昏欲睡。</p><p>作者还利用歪歪斜斜的手写字体，增加“现场感”。<br>精心设计许多爆笑的对白，让学习过程不会太枯燥。<br>还有模式告白节目，将设计模式拟人化成节目来宾，畅谈其内在的一切。<br>每一章都有数目不等的测验题。<br>每章最后有一页要点整理，这也是精华所在，我都是利用这一页做复习。</p><blockquote><p>我知道四人帮的《设计模式》是一本标准书，但倒不如先看看这部大部头，此书更为简易。<br>一旦你了解了解了基本原则，可以去看四人帮的那本圣经了。- Calanus</p></blockquote><h2 id="12、《哥德尔、艾舍尔、巴赫书：集异璧之大成》"><a href="#12、《哥德尔、艾舍尔、巴赫书：集异璧之大成》" class="headerlink" title="12、《哥德尔、艾舍尔、巴赫书：集异璧之大成》"></a>12、《<a href="http://t.cn/zOEsu0d" target="_blank" rel="noopener">哥德尔、艾舍尔、巴赫书：集异璧之大成</a>》</h2><p>推荐数：437</p><p>如果下昂真正深入阅读，我推荐道格拉斯·侯世达（Douglas Hofstadter）的《哥德尔、艾舍尔、巴赫书》。<br>他极为深入研究了程序员每日都要面对的问题：递归、验证、证明和布尔代数。<br>这是一本很出色的读物，难度不大，偶尔有挑战，一旦你要鏖战到底，将是非常值得的。 – Jonik</p><h2 id="13、《代码整洁之道》"><a href="#13、《代码整洁之道》" class="headerlink" title="13、《代码整洁之道》"></a>13、《<a href="http://t.cn/zOEs3tt" target="_blank" rel="noopener">代码整洁之道</a>》</h2><p>推荐数：329</p><p>细节之中自有天地，整洁成就卓越代码</p><p>尽管糟糕的代码也能运行，但如果代码不整洁，会使整个开发团队泥足深陷，<br>写得不好的代码每年都要耗费难以计数的时间和资源。<br>然而这种情况并非无法避免。</p><p>著名软件专家RoberfC.Marlin在《代码整洁之道》中为你呈现出了革命性的视野。<br>Martin携同ObjectMetltor公司的同事，从他们有关整洁代码的最佳敏捷实践中提炼出软件技艺的价值观，<br>以飨读者，让你成为更优秀的程序员——只要你着手研读《代码整洁之道》。</p><p>阅读《代码整洁之道》需要你做些什么呢？你将阅读代码——大量代码。<br>《代码整洁之道》促使你思考代码中何谓正确，何谓错误。<br>更重要的是，《代码整洁之道》将促使你重新评估自己的专业价值观，以及对自己技艺的承诺。</p><p>从《代码整洁之道》中可以学到：</p><ul><li>好代码和糟糕的代码之间的区别；</li><li>如何编写好代码，如何将糟糕的代码转化为好代码；</li><li>如何创建好名称、好函数、好对象和好类；</li><li>如何格式化代码以实现其可读性的最大化；</li><li>如何在不妨碍代码逻辑的前提下充分实现错误处理；</li><li>如何进行单元测试和测试驱动开发。</li></ul><blockquote><p>虽然《代码整洁之道》和《代码大全》有很多共同之处，但它有更为简洁更为实际的清晰例子。 – Craig P. Motlin</p></blockquote><h2 id="14、《Effective-C-》和《More-Effective-C-》"><a href="#14、《Effective-C-》和《More-Effective-C-》" class="headerlink" title="14、《Effective C++》和《More Effective C++》"></a>14、《<a href="http://t.cn/zOEs1Mw" target="_blank" rel="noopener">Effective C++</a>》和《<a href="http://t.cn/zOEsBvc" target="_blank" rel="noopener">More Effective C++</a>》</h2><p>推荐数：297</p><p>在我职业生涯早期，Scott Meyer的《Effective C++》和后续的《More Effective C++》都对我的编程能力有着直接影响。<br>正如当时的一位朋友所说，这些书缩短你培养编程技能的过程，而其他人可能要花费数年。</p><p>去年对我影响最大的一本书是《大教堂与市集》，该书教会我很有关开源开发过程如何运作，和如何处理我代码中的Bug。 – John Channing</p><h2 id="15、《编程珠玑》"><a href="#15、《编程珠玑》" class="headerlink" title="15、《编程珠玑》"></a>15、《<a href="http://t.cn/zOEsBur" target="_blank" rel="noopener">编程珠玑</a>》</h2><p>推荐数：282</p><p>多年以来，当程序员们推选出最心爱的计算机图书时，《编程珠玑》总是位列前列。<br>正如自然界里珍珠出自细沙对牡蛎的磨砺，计算机科学大师Jon Bentley以其独有的洞察力和创造力，<br>从磨砺程序员的实际问题中凝结出一篇篇不朽的编程“珠玑”，<br>成为世界计算机界名刊《ACM通讯》历史上最受欢迎的专栏，<br>最终结集为两部不朽的计算机科学经典名著，影响和激励着一代又一代程序员和计算机科学工作者。</p><p>本书为第一卷，主要讨论计算机科学中最本质的问题：如何正确选择和高效地实现算法。</p><blockquote><p>尽管我不得不羞愧地承认，书中一半的东西我都没有理解，但我真的推荐《编程珠玑》，书中有些令人惊奇的东西。 – Matt Warren</p></blockquote><h2 id="16、《修改代码的艺术》by-Michael-Feathers"><a href="#16、《修改代码的艺术》by-Michael-Feathers" class="headerlink" title="16、《修改代码的艺术》by Michael Feathers"></a>16、《<a href="http://t.cn/zOEsgC0" target="_blank" rel="noopener">修改代码的艺术</a>》by Michael Feathers</h2><p>本书是继《重构》和《重构与模式》之后探讨修改代码技术的又一里程碑式的著作，<br>而且从涵盖面和深度上都超过了前两部经典。<br>书中不仅讲述面向对象语言（Java、C#和C++）代码，也有专章讨论C这样的过程式语言。</p><p>作者将理解、测试和修改代码的原理、技术和最新工具（自动化重构工具、单元测试框架、仿对象、集成测试框架等），<br>与解依赖技术和大量开发和设计优秀代码的原则、最佳实践相结合，许多内容非常深入，而且常常发前人所未发。</p><p>书中处处体现出作者独到的洞察力，以及多年开发和指导软件项目所积累的丰富经验和深厚功力。<br>通过这部集大成之作，你不仅能掌握最顶尖的修改代码技术，还可以大大提高对代码和软件开发的领悟力。</p><blockquote><p>我认为没有任何一本书能向这本书一样影响了我的编程观点。<br>它明确地告诉你如何处理其他人的代码，含蓄地教会你避免哪些（以及为什么要避免）。- Wolfbyte</p></blockquote><blockquote><p>同意。很多开发人员讨论用干净的石板来编写软件。<br>但我想几乎所有开发人员的某些时候是在吃其他开发人员的狗食。– Bernard Dy</p></blockquote><h2 id="17、《编码：隐匿在计算机软硬件背后的语言》"><a href="#17、《编码：隐匿在计算机软硬件背后的语言》" class="headerlink" title="17、《编码：隐匿在计算机软硬件背后的语言》"></a>17、《<a href="http://t.cn/zOEseyX" target="_blank" rel="noopener">编码：隐匿在计算机软硬件背后的语言</a>》</h2><p>这是一本讲述计算机工作原理的书。</p><p>不过，你千万不要因为“工作原理”之类的字眼就武断地认为，它是晦涩而难懂的。<br>作者用丰富的想象和清晰的笔墨将看似繁杂的理论阐述得通俗易懂，你丝毫不会感到枯燥和生硬。<br>更重要的是，你会因此而获得对计算机工作原理较深刻的理解。<br>这种理解不是抽象层面上的，而是具有一定深度的，这种深度甚至不逊于“电气工程师”和“程序员”的理解。</p><p>不管你是计算机高手，还是对这个神奇的机器充满敬畏之心的菜鸟，<br>都不妨翻阅一下《编码:隐匿在计算机软硬件背后的语言》，读一读大师的经典作品，必然会有收获。</p><blockquote><p>我推荐Charles Petzold的《编码》。<br>在这个充满工具和IDE的年代，很多复杂度已经从程序员那“抽取”走了，这本书一本开眼之作。 – hemil</p></blockquote><h2 id="18、《禅与摩托车维修艺术-Zen-and-the-Art-of-Motorcycle-Maintenance》"><a href="#18、《禅与摩托车维修艺术-Zen-and-the-Art-of-Motorcycle-Maintenance》" class="headerlink" title="18、《禅与摩托车维修艺术 / Zen and the Art of Motorcycle Maintenance》"></a>18、《<a href="http://t.cn/zOEsDwc" target="_blank" rel="noopener">禅与摩托车维修艺术 / Zen and the Art of Motorcycle Maintenance</a>》</h2><blockquote><p>对我影响最大的那本书是 Robert Pirsig 的《禅与摩托车维修艺术》。<br>不管你做什么事，总是要力求完美，彻底了解你手中的工具和任务，更为重要的是，<br>要有乐趣（因为如果你做事有乐趣，一切将自发引向更好的结果）。 – akr</p></blockquote><h2 id="19、《Peopleware-人件集-人性化的软件开发》"><a href="#19、《Peopleware-人件集-人性化的软件开发》" class="headerlink" title="19、《Peopleware / 人件集:人性化的软件开发》"></a>19、《<a href="http://t.cn/zOEskvE" target="_blank" rel="noopener">Peopleware / 人件集:人性化的软件开发</a>》</h2><blockquote><p>Demarco 和 Lister 表明，软件开发中的首要问题是人，并非技术。<br>他们的答案并不简单，只是令人难以置信的成功。<br>第二版新增加了八章内容。 – Eduardo Molteni</p></blockquote><h2 id="20、《Coders-at-Work-编程人生》"><a href="#20、《Coders-at-Work-编程人生》" class="headerlink" title="20、《Coders at Work / 编程人生》"></a>20、《<a href="http://t.cn/zOEskjT" target="_blank" rel="noopener">Coders at Work / 编程人生</a>》</h2><p>这是一本访谈笔录，记录了当今最具个人魅力的15位软件先驱的编程生涯。<br>包括DonaldKnuth、Jamie Zawinski、Joshua Bloch、Ken Thompson等在内的业界传奇人物，为我们讲述了<br>他们是怎么学习编程的，在编程过程中发现了什么以及他们对未来的看法，<br>并对诸如应该如何设计软件等长久以来一直困扰很多程序员的问题谈了自己的观点。</p><blockquote><p>一本非常有影响力的书，可以从中学到一些业界顶级人士的经验，了解他们如何思考并工作。 – Jahanzeb Farooq</p></blockquote><h2 id="21、《Surely-You’re-Joking-Mr-Feynman-别闹了，费曼先生！》"><a href="#21、《Surely-You’re-Joking-Mr-Feynman-别闹了，费曼先生！》" class="headerlink" title="21、《Surely You’re Joking, Mr. Feynman! / 别闹了，费曼先生！》"></a>21、《Surely You’re Joking, Mr. Feynman! / 别闹了，费曼先生！》</h2><blockquote><p>虽然这本书可能有点偏题，但不管你信不信，这本书曾在计算机科学专业课程的阅读列表之上。<br>一个优秀的角色模型，一本有关好奇心的优秀书籍。 – mike511</p></blockquote><h2 id="22、《Effective-Java-中文版》"><a href="#22、《Effective-Java-中文版》" class="headerlink" title="22、《Effective Java 中文版》"></a>22、《<a href="http://t.cn/zOnvvoV" target="_blank" rel="noopener">Effective Java 中文版</a>》</h2><blockquote><p>此书第二版教你如何编写漂亮并高效的代码，虽然这是一本Java书，但其中有很多跨语言的理念。 – Marcio Aguiar</p></blockquote><h2 id="23、《Patterns-of-Enterprise-Application-Architecture-企业应用架构模式》"><a href="#23、《Patterns-of-Enterprise-Application-Architecture-企业应用架构模式》" class="headerlink" title="23、《Patterns of Enterprise Application Architecture / 企业应用架构模式》"></a>23、《<a href="http://t.cn/zOnvP4i" target="_blank" rel="noopener">Patterns of Enterprise Application Architecture / 企业应用架构模式</a>》</h2><p>很奇怪，还没人推荐 Martin Fowler 的《企业应用架构模式》- levi rosol</p><h2 id="24、《The-Little-Schemer》和《The-Seasoned-Schemer》-nmiranda"><a href="#24、《The-Little-Schemer》和《The-Seasoned-Schemer》-nmiranda" class="headerlink" title="24、《The Little Schemer》和《The Seasoned Schemer》 nmiranda"></a>24、《The Little Schemer》和《The Seasoned Schemer》 nmiranda</h2><p>这两本是LISP的英文书，尚无中文版。<br>美国东北大学网站上也有电子版。</p><h2 id="25、《交互设计之路》英文名：《The-Inmates-Are-Running-The-Asylum-Why-High-Tech-Products-Drive-Us-Crazy-and-How-to-Restore-the-Sanity》该书作者：Alan-Cooper，人称Visual-Basic之父，交互设计之父。"><a href="#25、《交互设计之路》英文名：《The-Inmates-Are-Running-The-Asylum-Why-High-Tech-Products-Drive-Us-Crazy-and-How-to-Restore-the-Sanity》该书作者：Alan-Cooper，人称Visual-Basic之父，交互设计之父。" class="headerlink" title="25、《交互设计之路》英文名：《The Inmates Are Running The Asylum: Why High Tech Products Drive Us Crazy and How to Restore the Sanity》该书作者：Alan Cooper，人称Visual Basic之父，交互设计之父。"></a>25、《交互设计之路》英文名：《The Inmates Are Running The Asylum: Why High Tech Products Drive Us Crazy and How to Restore the Sanity》该书作者：Alan Cooper，人称Visual Basic之父，交互设计之父。</h2><p>本书是基于众多商务案例，讲述如何创建更好的、高客户忠诚度的软件产品和基于软件的高科技产品的书。<br>本书列举了很多真实可信的实际例子，说明目前在软件产品和基于软件的高科技产品中，普遍存在着“难用”的问题。</p><p>作者认为，“难用”问题是由这些产品中存在着的高度“认知摩擦”引起的，<br>而产生这个问题的根源在于现今软件开发过程中欠缺了一个为用户利益着想的前期“交互设计”阶段。<br>“难用”的产品不仅损害了用户的利益，最终也将导致企业的失败。</p><p>本书通过一些生动的实例，让人信服地讲述了由作者倡导的“目标导向”交互设计方法在解决“难用”问题方面的有效性，<br>证实了只有改变现有观念，才能有效地在开发过程中引入交互设计，将产品的设计引向成功。</p><p>本书虽然是一本面向商务人员而编写的书，但也适合于所有参与软件产品和基于软件的高科技产品开发的专业人士，<br>以及关心软件行业和高科技行业现状与发展的人士阅读。</p><p>他还有另一本中文版著作：《About Face 3 交互设计精髓》</p><h2 id="26、《Why’s-Poignant-Guide-to-Ruby-》"><a href="#26、《Why’s-Poignant-Guide-to-Ruby-》" class="headerlink" title="26、《Why’s (Poignant) Guide to Ruby 》"></a>26、《Why’s (Poignant) Guide to Ruby 》</h2><p>如果你不是程序员，阅读此书可能会很有趣，但如果你已经是个程序员，可能会有点乏味。</p><h2 id="27、《Unix编程艺术》"><a href="#27、《Unix编程艺术》" class="headerlink" title="27、《Unix编程艺术》"></a>27、《Unix编程艺术》</h2><blockquote><p>It is useful regardless operating system you use. – J.F. Sebastian</p></blockquote><blockquote><p>不管你使用什么操作系统，这本书都很有用。 – J.F. Sebastian</p></blockquote><h2 id="28、《高效程序员的45个习惯：敏捷开发修炼之道》"><a href="#28、《高效程序员的45个习惯：敏捷开发修炼之道》" class="headerlink" title="28、《高效程序员的45个习惯：敏捷开发修炼之道》"></a>28、《<a href="http://t.cn/zOnvhRM" target="_blank" rel="noopener">高效程序员的45个习惯：敏捷开发修炼之道</a>》</h2><p>45个习惯，分为7个方面：工作态度、学习、软件交付、反馈、编码、调试和协作。</p><p>每一个具体的习惯里，一开始提出一个谬论，然后展开分析，之后有针对性地提出正确的做法，并设身处地地讲出了正确做法给你个人的“切身感受”，最后列出几条注意事项，帮助你修正自己的做法（“平衡的艺术”）。</p><h2 id="29、《测试驱动开发》"><a href="#29、《测试驱动开发》" class="headerlink" title="29、《测试驱动开发》"></a>29、《<a href="http://t.cn/zOnvzK7" target="_blank" rel="noopener">测试驱动开发</a>》</h2><blockquote><p>前面已经提到的很多书都启发了我，并影响了我，但这本书每位程序员都应该读。<br>它向我展示了单元测试和TDD的重要性，并让我很快上手。 – Curro</p></blockquote><blockquote><p>我不关心你的代码有多好或优雅。<br>如果你没有测试，你或许就如同没有编写代码。<br>这本书得到的推荐数应该更高些。<br>人们讨论编写用户喜欢的软件，或既设计出色并健壮的高效代码，但如果你的软件有一堆bug，谈论那些东西毫无意义。– Adam Gent</p></blockquote><h2 id="30、《点石成金-访客至上的网页设计秘笈》"><a href="#30、《点石成金-访客至上的网页设计秘笈》" class="headerlink" title="30、《点石成金:访客至上的网页设计秘笈》"></a>30、《<a href="http://t.cn/zOnvZYq" target="_blank" rel="noopener">点石成金:访客至上的网页设计秘笈</a>》</h2><p>可用性设计是Web设计中最重要也是难度最大的一项任务。<br>《点石成金－访客至上的网页设计秘笈（原书第二版）》作者根据多年从业的经验，剖析用户的心理，<br>在用户使用的模式、为扫描进行设计、导航设计、主页布局、可用性测试等方面提出了许多独特的观点，<br>并给出了大量简单、易行的可用性设计的建议。</p><p>本书短小精炼，语言轻松诙谐，书中穿插大量色彩丰富的屏幕截图、趣味丛生的卡通插图以及包含大量信息的图表，<br>使枯燥的设计原理变得平易近人。</p><p>本书适合从事Web设计和Web开发的技术人员阅读，特别适合为如何留住访问者而苦恼的网站/网页设计人员阅读。<br>这是一本关于Web设计原则而不是Web设计技术的书。</p><p>本书作者是Web设计专家，具有丰富的实践经验。<br>他用幽默的语言为你揭示Web设计中重要但却容易被忽视的问题，只需几个小时，<br>你便能对照书中讲授的设计原则找到网站设计的症结所在，令你的网站焕然一新。</p><blockquote><p>取决于你所追求的目标。<br>我喜欢《代码大全》是因纯编程，《点石成金》是一本有关UI设计的卓越书籍。 – Justin Standard</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 书籍 </tag>
            
            <tag> 程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何评价『黑客与画家』</title>
      <link href="/2019/07/18/%E9%BB%91%E5%AE%A2%E4%B8%8E%E7%94%BB%E5%AE%B6/"/>
      <url>/2019/07/18/%E9%BB%91%E5%AE%A2%E4%B8%8E%E7%94%BB%E5%AE%B6/</url>
      
        <content type="html"><![CDATA[<p>传送门：<a href="http://t.cn/zlg4njc" target="_blank" rel="noopener">黑客与画家:硅谷创业之父Paul Graham文集</a></p><p>一本好的书，让我们收获的不单单是某种技巧，或者某种方法论，<br><strong>他教给我们的是一种严密的思维方式，是一种学会把自己的眼光放得更加长远的决策习惯，他促使我们养成独立思考的习惯。</strong><br>他没有送给我们一条大鱼，却把捕捉大鱼的方法交给了我们， <strong>授人以鱼，不如授人以渔</strong>。</p><p>我一直觉得把一个我们所熟知的很普通的问题讲的非常透彻而且非常清楚是一种相当了不起的能力，<br>保罗·格雷尔姆 不仅把问题讲的非常透彻，而且还非常有趣，<br>让我们在读的时候感觉趣味盎然，这一点是非常不容易的。</p><p>很多的互联网从业者想必早就听说过这本书，而且大部分人应该都已经阅读过这本书了，<br>所以我就简单的从其他的角度来谈一下我读完本书的一些感想，希望对大家有所帮助。</p><p>在阅读「为什么书呆子不受欢迎」这章时，我想到了这么一句话，「<strong>你的时间在哪里，你的成就就在哪里</strong>」。<br>生活中的我们，总是喜欢羡慕那些成功人士，我们总觉得那些成功人士与我们普通人不一样，<br>他们必然懂得某种通往成功的诀窍，他们生下来就与周围的人们有所不同。<br>我们也总是希望能从这些成功人士那里获得某些珍贵的建议，获得那些能使人最终功成名就的万用妙方。<br>在武侠小说里面， <strong>渴望成为武林高手的人，都希望得到一本有着盖世神功的武林秘籍。</strong><br>因为这秘籍一旦得手，只要依葫芦画瓢，就可大功告成。 </p><p>但是世事又怎会如此简单，也永远不会有这样或者那样的武林秘诀。<br><strong>所谓的成功人士不过是把自己的时间投入到那些他们感兴趣的领域里面罢了。</strong><br>其实， <strong>我们每一个人也许都是我们所投入时间的那个领域的成功人士。</strong><br>有的同学，可能在学校里没有把时间投入学习中，但是呢，投入了很多的时间在游戏领域，每天花费大量的时间去玩游戏，<br>看游戏讲解视频，研究游戏的战略，思考游戏的玩法，在这个游戏里面，他就是王者；<br>有的人呢，可能喜欢计算机，他喜欢与程序打交道，他希望了解计算机是如何思考的，于是最终他就成了黑客。</p><p>画家能够把画画的比我们更好，只是因为他把他的时间都投入到里面罢了，田径运动员跑的比我们更快，<br>同样只不过因为他把他的时间都投入到跑步里面罢了。<br><strong>书呆子也并非不想让自己不受欢迎，他们只是更愿意把时间投入到让自己聪明上去罢了。</strong><br>我们每一个人，都可以自己去决定把自己的时间投入到哪个领域，我们所投入的时间最终也会成就我们。</p><p>在阅读本书的其他章节的时候，我更加深刻的发觉，黑客们，其实与我们并没有多大的不同，<br><strong>他们只是比我们普通人更加崇尚分享、开放和民主，他们对任何被禁止的东西都怀有特别强烈的好奇心，他们喜欢去思考那些似乎不应该被思考的问题，他们相信计算机将会深刻的改变人们的生活。</strong></p><p>虽然这是一本讲述黑客的书，不过个人觉得每个人都应该看看。<br>如同译者阮一峰所言：未来的人类生活不仅是人与人的互动，而且更多的将是人与计算机的互动。<br>想要把握这个时代，就必须理解计算机。<br>理解计算机的关键，则是要理解计算机背后的人。<br>表面上这是一个机器的时代，但是实际上机器的设计者决定了我们的时代。<br><strong>程序员的审美决定了你看到的软件界面，程序员的爱好决定了你有什么样的软件可以使用。</strong></p><p>如果你想要进一步了解作者的话，下面这两个链接可以帮助你：</p><ul><li>作者博客主页： <a href="http://www.paulgraham.com" target="_blank" rel="noopener">http://www.paulgraham.com</a></li><li>Wiki 百科上关于他的介绍： <a href="http://en.wikipedia.org/wiki/Paul_Graham_(computer_programmer)" target="_blank" rel="noopener">http://en.wikipedia.org/wiki/Paul_Graham_(computer_programmer)</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> book </category>
          
      </categories>
      
      
        <tags>
            
            <tag> book </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/07/18/hello-world/"/>
      <url>/2019/07/18/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
